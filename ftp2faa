#!/usr/bin/env python

import os
import logging

from logging import handlers

from Bio import SeqIO

from bacteria2go.colorlog import ColorFormatter
from bacteria2go import __version__
from bacteria2go.utils import *

__author__ = "Marco Galardini"

def getOptions():
    import argparse

    # create the top-level parser
    description = "Convert faa files download from NCBI FTP into a single faa file"
    parser = argparse.ArgumentParser(description = description,
                                    prog = 'ftp2faa')
    parser.add_argument('ftpdir', action='store',
                        help='FTP directory')
    parser.add_argument('exclude', action='store', nargs='?',
                        default=None,
                        help='Genomes to be excluded (contains the names of the directories)')

    parser.add_argument('--working-dir', action='store',
                        default='.',
                        dest='wdir',
                        help='Working directory')
    parser.add_argument('-v', action='count',
                        default=0,
                        help='Increase verbosity level')
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()
    
if __name__ == "__main__":
    options = getOptions()

    # Log setup
    logger = logging.getLogger()

    ch = logging.StreamHandler()
    if options.v == 0:
        ch.setLevel(logging.INFO)
    elif options.v >= 1:
        ch.setLevel(logging.DEBUG)
    formatter = ColorFormatter('%(asctime)s - $COLOR%(message)s$RESET','%H:%M:%S')
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    logger.setLevel(logging.DEBUG)

    fh = handlers.RotatingFileHandler('ftp2faa.log', maxBytes=2000000)
    formatter = logging.Formatter('%(asctime)s - %(name)s - [%(levelname)s] - %(message)s',
                            '%Y-%m-%d %H:%M:%S')
    fh.setFormatter(formatter)
    logger.addHandler(fh)
   
    # Start
    exclude = set()
    if options.exclude is not None:
        for l in open(options.exclude):
            l = l.strip()
            exclude.add(l)

    logger.info('Looking into %s'%options.ftpdir)

    filez = os.listdir(options.ftpdir)
    dirs = list(filter(lambda x: os.path.isdir(os.path.join(options.ftpdir, x)),
                       filez))
    for i, d in zip(range(1, len(dirs)+1), dirs):
        if '%s.json'%d not in filez:
            continue
        if d in exclude:
            logger.warning('Skipping %s'%d)
            continue
        logger.info('(%d/%d) Looking into %s'%(i, len(dirs), d))
        
        species = d
        d = os.path.join(options.ftpdir, d)
        gs = list(filter(lambda x: x.endswith('.faa'), os.listdir(d)))
        if len(gs) == 0:
            logger.warning('No faa files in %s'%d)
            continue

        out = os.path.join(options.wdir, '%s.fa'%species)
        # Avoid "arguments lists too long" errors
        if len(gs) > 100:
            first = True
            for gs1 in get_span(gs, 100):
                if first:
                    if not runCmd('cat %s > %s'%
                                 (' '.join([os.path.join(options.ftpdir, d, x) for x in gs1]),
                                 out)):
                        logger.error('Could not merge faa files!')
                        sys.exit(1)
                    first = False
                else:
                    if not runCmd('cat %s >> %s'%
                                 (' '.join([os.path.join(options.ftpdir, d, x) for x in gs1]),
                                 out)):
                        logger.error('Could not merge faa files!')
                        sys.exit(1)    
        else:
            if not runCmd('cat %s > %s'%
                         (' '.join([os.path.join(options.ftpdir, d, x) for x in gs]),
                          out)):
                logger.error('Could not merge faa files!')
                sys.exit(1)
