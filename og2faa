#!/usr/bin/env python

import os
import sys
import logging

from logging import handlers

from Bio import SeqIO

from bacteria2go.colorlog import ColorFormatter
from bacteria2go import __version__

__author__ = "Marco Galardini"

def getOptions():
    import argparse

    # create the top-level parser
    description = ("Which OGs miss annotations from Uniprot?")
    parser = argparse.ArgumentParser(description = description)
    parser.add_argument('pangenome', action="store",
                        help='Pangenome tsv file')
    parser.add_argument('faadir', action="store",
                        help='Protein fasta files directory (ORG.fa)')
    parser.add_argument('ogfile', action="store",
                        nargs='?',
                        default=None,
                        help='OGs to be considered')
    parser.add_argument('outfile', action="store",
                        nargs='?',
                        default='og2faa.faa',
                        help='Output file [og2faa.faa]')

    parser.add_argument('-v', action='count',
                        default=0,
                        help='Increase verbosity level')
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    options = getOptions()

    # Log setup
    logger = logging.getLogger()

    ch = logging.StreamHandler()
    if options.v == 0:
        ch.setLevel(logging.INFO)
    elif options.v >= 1:
        ch.setLevel(logging.DEBUG)
    formatter = ColorFormatter('%(asctime)s - $COLOR%(message)s$RESET','%H:%M:%S')
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    logger.setLevel(logging.DEBUG)

    fh = handlers.RotatingFileHandler('og2faa.log', maxBytes=2000000)
    formatter = logging.Formatter('%(asctime)s - %(name)s - [%(levelname)s] - %(message)s',
                            '%Y-%m-%d %H:%M:%S')
    fh.setFormatter(formatter)
    logger.addHandler(fh)

    # Start
    ogs = set()
    if options.ogfile is not None:
        for l in open(options.ogfile):
            ogs.add(l.strip())
        logger.info('Considering only %d OGs (found in %s)'%(len(ogs),
                                                             options.ogfile))

    logger.info('Parsing pangenome (%s)'%options.pangenome)

    pg = {}
    orgs = set()
    prots = set()
    for l in open(options.pangenome):
        if l.strip().startswith('#'):
            continue

        orth, prot, org = l.strip().split('\t')

        if len(ogs) > 0 and orth not in ogs:
            #logger.debug('Skipping OG %s'%orth)
            continue

        pg[orth] = (prot, org)
        orgs.add( org )
        prots.add( prot )

    seqs = set()

    logger.info('Reading protein sequences from %s'%options.faadir)
    for f in os.listdir(options.faadir):
        if not f.endswith('.faa') and not f.endswith('.fa'):
            continue
        
        if f.split('.')[0] not in orgs:
            logger.warning('Skipping organism %s'%f)
            continue

        logger.info('Reading organism %s'%f)
        for s in SeqIO.parse(os.path.join(options.faadir,
                                          f),
                            'fasta'):

            if s.id not in prots:
                continue

            seqs.add(s)

    # Sanity check
    if len(seqs) != len(prots):
        logger.warning('Looking for %d proteins, %d found'%(len(prots),
                                                            len(seqs)))

    logger.info('Writing output file %s'%options.outfile)
    SeqIO.write(seqs, options.outfile, 'fasta')
